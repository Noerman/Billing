<?phpnamespace App\ClientBundle\Business\Product;use App\ClientBundle\Business;use App\ClientBundle\Business\Base\BaseGridHandler;use App\ClientBundle\Entity;use App\AdminBundle\Business\Order\Constants as OrderConstants;use App\AdminBundle\Business\ClientProduct\Constants as CPConstants;class GridHandler extends BaseGridHandler{    function buildBaseQuery($query, $baseObject = 'p', $filter)    {        $query->select('p.id, p.cost, p.idSchedule, p.nextDue, p.status, p.domain, r.name, r.idType')            ->from('AppClientBundle:ClientProduct', $baseObject)            ->innerJoin('AppClientBundle:Product', 'r', 'WITH', 'p.idProduct = r.id')            ->andWhere($baseObject . '.idClient = :idClient')            ->setParameter('idClient', $this->getUserId());    }    public function postParseRow(&$r)    {        $config = $this->container->get('app_admin.helper.common')->getConfig();        $r['idSchedule'] = OrderConstants::getOrderPaymentTerms()[$r['idSchedule']];        $r['nextDue']    = $r['nextDue']->format($config->getDateFormat());        $r['status']     = CPConstants::getStatuses()[$r['status']];        /*foreach ($r as $k => $v) {            if (strpos($k, 'setupFee') === 0 || strpos($k, 'price') === 0) {                $r[$k] = $this->helperFormatter->format($v, 'money');            }        }*/    }}