<?phpnamespace App\ClientBundle\Business\Order;use App\ClientBundle\Business;use App\ClientBundle\Business\Base\BaseGridHandler;use App\ClientBundle\Entity;class GridHandler extends BaseGridHandler{    function buildBaseQuery($query, $baseObject = 'p', $filter)    {        $query->select($baseObject . ', e.totalAmount, e.totalPayment, e.discount, e.tax')            ->from('AppClientBundle:ProductOrder', $baseObject)            ->leftJoin('AppClientBundle:ClientEstimate', 'e', 'WITH', $baseObject . '.idEstimate = e.id')            ->andWhere($baseObject . '.idClient = :idClient')            ->setParameter('idClient', $this->getUserId());    }    public function parseRow($row)    {        $arr = $this->helperCommon->copyEntityToArray($row[0]);        unset($row[0]);        return array_merge($arr, $row);    }    public function postParseRow(&$r)    {        $r['client'] = $this->helperFormatter->format($r['idClient'], 'mapping', 'client_list');        $r['product'] = $this->helperFormatter->format($r['idProduct'], 'mapping', 'product_list');        $r['paymentTerm'] = $this->helperFormatter->format($r['idOrderPaymentTerm'], 'mapping', 'order_payment_term');        $r['timestamp'] = $this->helperFormatter->format($r['timestamp'], 'datetime');        $r['status'] = $this->helperFormatter->format($r['status'], 'mapping', 'order_status');        $discount = round($r['totalAmount'] * $r['discount'], 2);        $tax = round(($r['totalAmount'] - $discount) * $r['tax'], 2);        $r['amount'] = round($r['totalAmount'] - $discount + $tax, 2);        $r['payment'] = round($r['totalPayment'], 2);        $r['amount'] = $this->helperFormatter->format($r['amount'], 'money');        $r['payment'] = $this->helperFormatter->format($r['payment'], 'money');    }}