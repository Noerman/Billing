<?phpnamespace App\AdminBundle\Controller;use Symfony\Component\HttpFoundation\Response;use App\AdminBundle\Business;use App\ClientBundle\Entity;class IpnController extends BaseController{    private function myReadPost()    {        $rawPostData = file_get_contents('php://input');        $rawPostArray = explode('&', $rawPostData);        $myPost = array();        foreach ($rawPostArray as $keyVal) {            $keyVal = explode('=', $keyVal);            if (count($keyVal) == 2) {                $myPost[$keyVal[0]] = urldecode($keyVal[1]);            }        }    }    private function confirmWithPaypal($req)    {        $ch = curl_init();        curl_setopt($ch, CURLOPT_URL, 'https://www.paypal.com/cgi-bin/webscr');        curl_setopt($ch, CURLOPT_POST, 1);        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);        curl_setopt($ch, CURLOPT_POSTFIELDS, $req);        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Host: www.paypal.com'));        // In wamp like environment where the root authority certificate doesn't comes in the bundle, you need        // to download 'cacert.pem' from "http://curl.haxx.se/docs/caextract.html" and set the directory path         // of the certificate as shown below.        // curl_setopt($ch, CURLOPT_CAINFO, dirname(__FILE__) . '/cacert.pem');        $res = curl_exec($ch);        curl_close($ch);        return $res;    }    public function handleAction()    {        $myPost = $this->myReadPost();        $req = 'cmd=_notify-validate';        if (function_exists('get_magic_quotes_gpc')) {            $get_magic_quotes_exits = true;        }        foreach ($myPost as $key => $value) {            if ($get_magic_quotes_exits == true && get_magic_quotes_gpc() == 1) {                $value = urlencode(stripslashes($value));            } else {                $value = urlencode($value);            }            $req .= "&$key=$value";        }        $res = $this->confirmWithPaypal($req);        $request = $this->get('request')->request;        $itemName = $request->get('item_name', '');        $itemNumber = $request->get('item_number', '');        $paymentStatus = $request->get('payment_status', '');        $paymentAmount = $request->get('payment_amount', '');        $paymentCurrency = $request->get('mc_currency', '');        $txnId = $request->get('txn_id');        $receiverEmail = $request->get('receiver_email', '');        $payerEmail = $request->get('payer_email', '');        $transactionExists = false;        $result = $this->get('doctrine')->getRepository('AppClientBundle:ClientPayment')->findOneByTransaction($tnxId);        if ($result) {            $transactionExists = true;        }        $em = $this->get('doctrine')->getEntityManager();        $config = $this->get('app_admin.helper.common')->getConfig();        $now = new \DateTime();        $from = $config->getDefaultEmail();        if ((strcmp($res, 'VERIFIED') == 0) &&            ($paymentCurrency == $config->getBillingCurrency()) &&            ($paymentStatus == 'Completed') &&            !$transactionExists        ) {            $clientPayment = new Entity\ClientPayment();            $clientPayment->setGateway(1);            $clientPayment->setTransaction($tnxId);            $clientPayment->setPayDate($now);            $clientPayment->setAmount($paymentAmount);            $clientPayment->setIdInvoice($itemNumber);            $em->persist($clientPayment);            $em->flush();            // Send payment success email            $content = "OpenBill has successfully recorded the following payment:        Payment status: $paymentStatusPayment amount: $paymentAmountPayment currency: $paymentCurrencyTransaction ID: $txnIdRecipient email: $receiverEmailBuyer email: $payerEmailInvoice ID: $itemNumberStatus: $res ";            if ($config->getPaypalSuccessEmail() != '') {                $message = \Swift_Message::newInstance()                    ->setSubject('OpenBill Payment Recorded')                    ->setFrom($from, $config->getBusinessName())                    ->setTo($config->getPaypalSuccessEmail())                    ->setBody($content, 'text/html');                $this->get('mailer')->send($message);            }        } else {            // Send payment failure email            $content = "OpenBill has received the following anomalous IPN. No payment has been recorded.        Payment status: $payment_statusPayment amount: $payment_amountPayment currency: $payment_currencyTransaction ID: $txn_idRecipient email: $receiver_emailBuyer email: $payer_emailInvoice ID: $item_numberStatus: $res ";            if ($config->getPaypalSuccessEmail() != '') {                $message = \Swift_Message::newInstance()                    ->setSubject('OpenBill Anomalous IPN')                    ->setFrom($from, $config->getBusinessName())                    ->setTo($config->getPaypalFailureEmail())                    ->setBody($content, 'text/html');                $this->get('mailer')->send($message);            }        }        // Log        $em = $this->get('doctrine')->getEntityManager();        $log = new Entity\Log();        $log->setIdType(Business\Log\Constants::LOG_TYPE_IPN_SUCCESS);        $log->setTimestamp(new \DateTime());        $log->setDescription($myPost);        $em->persist($log);        $em->flush();    }}