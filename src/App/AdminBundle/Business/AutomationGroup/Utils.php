<?phpnamespace App\AdminBundle\Business\AutomationGroup;use App\AdminBundle\Business\Base\BaseCreateHandler;use App\ClientBundle\Entity;use App\AdminBundle\Business;class Utils{    public static function getCustomerData($container, $order)    {        $doctrine = $container->get('doctrine');        $client = Business\GlobalUtils::getClientById($container, $order->getIdClient());        $product = $doctrine->getRepository('AppClientBundle:Product')->findOneById($order->getIdProduct());        $country = $doctrine->getRepository('AppClientBundle:Country')->findOneById($client->getIdCountry());        $data = array(            'productName'     => $product->getName(),            'productIdGroup'  => $product->getIdProductGroup(),            'productIdEmail'  => $product->getIdEmail(),            'productStock'    => $product->getStock(),            'clientFirstname' => $client->getFirstname(),            'clientLastname'  => $client->getLastname(),            'clientCompany'   => $client->getCompany(),            'clientAddress1'  => $client->getAddress1(),            'clientAddress2'  => $client->getAddress2(),            'clientCity'      => $client->getCity(),            'clientState'     => $client->getState(),            'clientPostcode'  => $client->getPostcode(),            'clientCountry'   => $country != null ? $country->getCode() : '',            'clientPhone'     => $client->getPhone(),            'clientEmail'     => $client->getEmail()        );        return $data;    }    public static function handlePostOrdered($container, $order)    {        $data = Utils::getCustomerData($container, $order);        $result = $container->get('doctrine')->getRepository('AppClientBundle:ProductAutomationGroup')            ->findBy(array('idProduct' => $order->getIdProduct(), 'idEvent' => Business\AutomationGroup\Constants::EVENT_AFTER_ORDERED));        foreach ($result as $r) {            $g = $container->get('doctrine')->getRepository('AppClientBundle:AutomationGroup')->findOneById($r->getIdAutomationGroup());            Utils::postData($data, $g);        }    }    public static function handlePostPaid($container, $order)    {        $data = Utils::getCustomerData($container, $order);        $result = $container->get('doctrine')->getRepository('AppClientBundle:ProductAutomationGroup')            ->findBy(array('idProduct' => $order->getIdProduct(), 'idEvent' => Business\AutomationGroup\Constants::EVENT_AFTER_PAID));        foreach ($result as $r) {            $g = $container->get('doctrine')->getRepository('AppClientBundle:AutomationGroup')->findOneById($r->getIdAutomationGroup());            Utils::postData($data, $g);        }    }    public static function handlePostAccepted($container, $order)    {        $data = Utils::getCustomerData($container, $order);        $result = $container->get('doctrine')->getRepository('AppClientBundle:ProductAutomationGroup')            ->findBy(array('idProduct' => $order->getIdProduct(), 'idEvent' => Business\AutomationGroup\Constants::EVENT_AFTER_ACCEPTED));        foreach ($result as $r) {            $g = $container->get('doctrine')->getRepository('AppClientBundle:AutomationGroup')->findOneById($r->getIdAutomationGroup());            Utils::postData($data, $g);        }    }    public static function postData($data, $g)    {        if ($g) {            $c = curl_init();            curl_setopt($c, CURLOPT_URL, $g->getUrl());            curl_setopt($c, CURLOPT_POST, 1);            curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);            curl_setopt($c, CURLOPT_POSTFIELDS, $data);            $resp = curl_exec($c);        }    }}