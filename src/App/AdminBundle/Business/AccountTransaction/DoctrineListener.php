<?phpnamespace App\AdminBundle\Business\AccountTransaction;use Doctrine\ORM\Event\LoadClassMetadataEventArgs;use Doctrine\ORM\Event\LifecycleEventArgs;use App\ClientBundle\Entity;use App\AdminBundle\Business;class DoctrineListener implements \Doctrine\Common\EventSubscriber{    protected $container;    public function __construct($container)    {        $this->container = $container;    }    public function getSubscribedEvents()    {        return array('postRemove', 'postPersist', 'postUpdate');    }    public function postRemove(LifecycleEventArgs $args)    {        $entity = $args->getEntity();        if ($entity instanceof Entity\AccountTransaction) {            $this->updateBalance($entity->getIdAccount());        }    }    public function postPersist(LifecycleEventArgs $args)    {        $entity = $args->getEntity();        if ($entity instanceof Entity\AccountTransaction) {            $this->updateBalance($entity->getIdAccount());        }    }    public function postUpdate(LifecycleEventArgs $args)    {        $entity = $args->getEntity();        if ($entity instanceof Entity\AccountTransaction) {            $this->updateBalance($entity->getIdAccount());        }    }    public function updateBalance($accountId)    {        $account = $this->container->get('doctrine')->getRepository('AppClientBundle:Account')->findOneById($accountId);        $em = $this->container->get('doctrine')->getEntityManager();        // In amount        $query = $em->createQueryBuilder();        $query->select("SUM(p.amount) as totalAmount")            ->from('AppClientBundle:AccountTransaction', 'p')            ->andWhere('p.idAccount = :idAccount')            ->setParameter('idAccount', $accountId)            ->andWhere('p.idDirection = ' . Business\Account\Constants::ACCOUNT_DIRECTION_IN);        $inAmount = $query->getQuery()->getSingleScalarResult();        // Out amount        $query = $em->createQueryBuilder();        $query->select("SUM(p.amount) as totalAmount")            ->from('AppClientBundle:AccountTransaction', 'p')            ->andWhere('p.idAccount = :idAccount')            ->setParameter('idAccount', $accountId)            ->andWhere('p.idDirection = ' . Business\Account\Constants::ACCOUNT_DIRECTION_OUT);        $outAmount = $query->getQuery()->getSingleScalarResult();        $account->setBalance($inAmount - $outAmount);        $em->persist($account);        $em->flush();    }}