<?phpnamespace App\AdminBundle\Business\Base;use App\UserBundle\Entity\User;abstract class BaseGridHandler{    protected $filter;    protected $sortField;    protected $sortDirection;    protected $pagerSkip;    protected $pagerTake;    protected $container;    protected $helperCommon;    protected $helperMapping;    protected $helperFormatter;    public function __construct($container)    {        $this->container = $container;        $this->helperCommon = $container->get('app_admin.helper.common');        $this->helperMapping = $container->get('app_admin.helper.mapping');        $this->helperFormatter = $container->get('app_admin.helper.formatter');    }    public function setSort($field, $direction)    {        $this->sortField = $field;        $this->sortDirection = $direction;    }    public function setPager($skip, $take)    {        $this->pagerSkip = $skip;        $this->pagerTake = $take;    }    public function setFilter($filter)    {        $this->filter = $filter;    }    abstract function buildBaseQuery($query, $baseObject = 'p', $filter);    public function postParseRow(&$rowArray)    {    }    public function postGetResultArray(&$array)    {    }    public function parseRow($row)    {        if (is_array($row)) {            return $row;        }        return $this->helperCommon->copyEntityToArray($row);    }    public function postBuilderQuery($query)    {    }    /**     * @return User     */    protected function getUser()    {        return $this->container->get('security.context')->getToken()->getUser();    }    public function getEntityManager()    {        return $this->container->get('doctrine')->getEntityManager();    }    public function getResultArray()    {        $em = $this->getEntityManager();        $query = $em->createQueryBuilder();        $this->buildBaseQuery($query, 'p', $this->filter);        $query->orderBy('p.' . $this->sortField, $this->sortDirection);        $query->setFirstResult($this->pagerSkip);        $query->setMaxResults($this->pagerTake);        $this->postBuilderQuery($query);        $array = array();        $result = $query->getQuery()->getResult();        foreach ($result as $row) {            $rowParsed = $this->parseRow($row);            $this->postParseRow($rowParsed);            $array[] = $rowParsed;        }        $this->postGetResultArray($array);        return $array;    }    public function buildTotalMatchedQuery($query, $baseObject, $filter)    {        return $this->buildBaseQuery($query, $baseObject, $filter);    }    public function getTotalMatched()    {        $em = $this->getEntityManager();        $query = $em->createQueryBuilder();        $this->buildTotalMatchedQuery($query, 'p', $this->filter);        $query->select('COUNT(p)');        return $query->getQuery()->getSingleScalarResult();    }}