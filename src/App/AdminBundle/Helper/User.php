<?phpnamespace App\AdminBundle\Helper;class User{    protected $container;    public function __construct($container)    {        $this->container = $container;    }    public function encodePassword($password)    {        $bcrypt = $this->container->get('app_admin.helper.bcrypt');        return $bcrypt->hash($password);    }    public function checkPassword($password, $user)    {        $bcrypt = $this->container->get('app_admin.helper.bcrypt');        return $bcrypt->verify($user->getPassword(), $password);    }    public function hasRole($role)    {        $userSession = $this->getUserSession();        if ($userSession != null)        {            if (in_array($role, $userSession->getRoles()))            {                return true;            }        }        return false;    }    public function getUserSession()    {        $token = $this->container->get('security.context')->getToken();        if ($token != null)        {            return $token->getUser();        }        return null;    }    public function disableApiKey($user)    {        $user->setApiKey('');        $em = $this->container->get('doctrine')->getEntityManager();        $em->persist($user);        return $em->flush();    }    public function setRandomApiKey($user)    {        $tokenGenerator = $this->container->get('fos_user.util.token_generator');        $key = substr($tokenGenerator->generateToken(), 0, 32);        $encoder_service = $this->container->get('security.encoder_factory');        $encoder = $encoder_service->getEncoder($user);        $encoded_key = $encoder->encodePassword($key, $user->getSalt());        $user->setApiKey($encoded_key);        $em = $this->container->get('doctrine')->getEntityManager();        $em->persist($user);        $em->flush();        return $key;    }}