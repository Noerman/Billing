<?phpnamespace App\AdminBundle\Helper;class Doctrine{    protected $container;    public function __construct($container)    {        $this->container = $container;    }    public function getRequestId()    {        $request = $this->container->get('request');        $id = $request->request->get('id', null);        if ($id == null) {            $id = $request->query->get('id', 0);        }        return $id;    }    public function findOneByRequestId($repository)    {        $id = $this->getRequestId();        return $this->container->get('doctrine')->getRepository($repository)->findOneById($id);    }    public function findOnebyId($repository, $id)    {        return $this->container->get('doctrine')->getRepository($repository)->findOneById($id);    }    public function deleteOneByRequestId($repository)    {        $em = $this->container->get('doctrine')->getEntityManager();        $id = $this->getRequestId();        $obj = $this->container->get('doctrine')->getRepository($repository)->findOneById($id);        if ($obj != false) {            $em->remove($obj);            $em->flush();        }    }    public function deleteOneById($repository, $id)    {        $em = $this->container->get('doctrine')->getEntityManager();        $obj = $this->container->get('doctrine')->getRepository($repository)->findOneById($id);        if ($obj != false) {            $em->remove($obj);            $em->flush();        }    }    public function isNotExist($repository, $field, $value, $exceptId = 0)    {        $em = $this->container->get('doctrine')->getEntityManager();        $query = $em->createQueryBuilder();        $query->select('p')            ->from($repository, 'p')            ->andWhere('p.' . $field . ' = :value')            ->setParameter('value', $value);        if ($exceptId != 0) {            $query->andWhere('p.id != :exceptId')                ->setParameter('exceptId', $exceptId);        }        $result = $query->getQuery()->getResult();        foreach ($result as $row) {            return false;        }        return true;    }    public function isNotExistControl($repository, $field, $value, $exceptId = 0)    {        $em = $this->container->get('doctrine')->getEntityManager('control');        $query = $em->createQueryBuilder();        $query->select('p')            ->from($repository, 'p')            ->andWhere('p.' . $field . ' = :value')            ->setParameter('value', $value);        if ($exceptId != 0) {            $query->andWhere('p.id != :exceptId')                ->setParameter('exceptId', $exceptId);        }        $result = $query->getQuery()->getResult();        foreach ($result as $row) {            return false;        }        return true;    }    public function loadList($table, $searchField, $getField, $searchData)    {        $cond = array($searchField => $searchData);        $result = $this->container->get('doctrine')->getRepository($table)->findBy($cond);        $list = array();        foreach ($result as $r) {            $getMethod = 'get' . ucfirst($getField);            $list[] = $r->$getMethod();        }        return $list;    }    public function deleteList($table, $searchField, $searchData)    {        $em = $this->container->get('doctrine')->getEntityManager();        $query = $em->createQueryBuilder();        $query->delete($table, 'p')            ->andWhere('p.' . $searchField . ' = ' . $searchData)            ->getQuery()->execute();    }    public function saveList($mainEntity, $listEntity, $list, $mainId, $listId)    {        $em = $this->container->get('doctrine')->getEntityManager();        $setMethod1 = 'set' . ucfirst($mainId);        $setMethod2 = 'set' . ucfirst($listId);        $listEntity->$setMethod1($mainEntity->getId());        foreach ($list as $id) {            $entity = clone $listEntity;            $entity->$setMethod2($id);            $em->persist($entity);        }        $em->flush();    }}